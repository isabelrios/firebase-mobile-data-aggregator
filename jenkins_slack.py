#! /usr/bin/env python

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

'''
Sends a message to Slack with a formatted payload from a JSON file
generated by client.py
'''

import argparse
import json
import os
import sys

import requests


def parse_args(cmdln_args):
    parser = argparse.ArgumentParser(
        description='Post formatted payload to Slack'
    )

    parser.add_argument(
        '--input',
        default='payload.json',
        help='Input (JSON)',
        required=False
    )

    return parser.parse_args(args=cmdln_args)

def post_to_slack(data):
    webhook_url = os.environ['SLACK_WEBHOOK']
    requests.post(webhook_url, json=data)

def build_payload_header() -> str:
    return [{
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "Test Test"
                    }
                }]

def build_payload_content_isa(dataset: dict) -> list:
    # Print only 4 decimals
    for dictionary in dataset:
        for key, value in dictionary.items():
            if key != "testName":
                dictionary[key] = round(float(dictionary[key]),4)

    new_data = [{k: v for k, v in d.items() if v != 0.0} for d in dataset]
    first_string = new_data[1]
    slack_payload = []

    for dic in new_data:
        s = json.dumps(dic)
        string = s.replace("testName", "") 
        string2 = string.replace("\"", "")
        string3 = string2.replace("()", "*")
        string4 = string3.replace(":", "=")
        string5 = string4.replace("TabsPerformanceTest/", "*")
        string6 = string5.replace(",", "\n")
        string7 = string6.replace("Clock Monotonic Time", "ClockMonotonicTime")

        each_test_data = {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": string6[2:-1]
                        }
                    ]
            }
        slack_payload.append(each_test_data)

    return slack_payload

def main():
    args = parse_args(sys.argv[1:])
    header = build_payload_header()
    
    try:
        with open(args.input) as data_file:
            dataset = json.load(data_file)
            header = build_payload_header()
            content = build_payload_content_isa(dataset)

        data = {'blocks': header + content}
        post_to_slack(data)

    except FileNotFoundError as e:
        print(e)
        sys.exit(1)

if __name__ == '__main__':
    main()
